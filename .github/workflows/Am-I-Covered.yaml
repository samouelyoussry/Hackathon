name: Am I Covered Workflow

  # manual trigger with optional input to select a service
on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build (e.g., service-a). Leave empty to build all changed services.'
        required: false
        default: ''

jobs:
  
  determine-services:
    runs-on: ubuntu-latest
  # Job 1: Determine which services need to be built
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}  # Expose the matrix output to next job

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Identify which services should be built
      - name: Set build matrix
        id: set-matrix
        run: |
          # List of known services 

          SERVICES=("service-a" "service-b" "service-c")

          # If manual input was provided (via workflow_dispatch), use it directly
          if [ "${INPUT_SERVICE}" != "" ]; then
            SELECTED="[\"${INPUT_SERVICE}\"]"

          else
            # If no input, detect which services changed since the last commit
            CHANGED=()
            for service in "${SERVICES[@]}"; do
              if git diff --name-only ${{ github.sha }} ${{ github.event.before }} | grep -q "^$service/"; then
                CHANGED+=("\"$service\"")
              fi
            done

            # If no service was detected as changed, fallback to all services
            
            if [ ${#CHANGED[@]} -eq 0 ]; then
              CHANGED=("\"service-a\"" "\"service-b\"" "\"service-c\"")
            fi

            SELECTED="[${CHANGED[*]}]"
          fi

          # Output matrix in JSON format for use in the next job
          echo "matrix={\"service\": $SELECTED}" >> $GITHUB_OUTPUT

        env:
          # Pass the input value from GitHub Actions into the shell script
          INPUT_SERVICE: ${{ github.event.inputs.service }}

  # Job 2: Build each service's Docker image based on the dynamic matrix
  build:
    needs: determine-services  # Wait for the matrix to be generated
    runs-on: ubuntu-latest
    strategy:
      # Create a job per service using the generated matrix
      matrix: ${{ fromJson(needs.determine-services.outputs.matrix) }}

    steps:
      # Checkout the code again (required per job)
      - name: Checkout code
        uses: actions/checkout@v3

      # Optional: Log in to Docker Hub or another container registry
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image for the current matrix service
      - name: Build and push image
        run: |
          # Define image name using the service folder name
          IMAGE_NAME=my-org/${{ matrix.service }}

          echo "ðŸ”¨ Building $IMAGE_NAME from ${{ matrix.service }}/Dockerfile"

          # Build Docker image using the service subfolder
          docker build -t $IMAGE_NAME:latest ./${{ matrix.service }}

          # Push image to registry
          docker push $IMAGE_NAME:latest
